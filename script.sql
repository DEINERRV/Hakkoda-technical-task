
--->
CREATE OR REPLACE DATABASE HAKKODA;
CREATE OR REPLACE SCHEMA TECHNICAL_ASSESSMENT;

--->
CREATE OR REPLACE TABLE TRANSACTIONS (
    CLIENT_ID NUMBER,
    CLIENT_NAME STRING,
    CLIENT_LASTNAME STRING,
    EMAIL STRING,
    STORE_ID NUMBER,	
    STORE_NAME STRING,	
    LOCATION STRING,
    PRODUCT_ID NUMBER,
    PRODUCT_NAME STRING,
    CATEGORY STRING,
    BRAND STRING,
    ADDRESS_ID NUMBER,
    STREET STRING,
    CITY STRING,
    STATE STRING,
    ZIP_CODE NUMBER,
    TRANSACTION_ID NUMBER,
    QUANTITY_OF_ITEMS_SOLD NUMBER,
    UNIT_PRICE FLOAT,
    DISCOUNT DOUBLE  
);

--->
CREATE OR REPLACE WAREHOUSE HAKKODA_WH WITH
   WAREHOUSE_SIZE='X-SMALL'
   AUTO_SUSPEND = 180
   AUTO_RESUME = TRUE
   INITIALLY_SUSPENDED=TRUE;

--->
CREATE OR REPLACE FILE FORMAT MY_CSV_FORMAT
  TYPE = CSV
  FIELD_DELIMITER = ','
  SKIP_HEADER = 1
  NULL_IF = ('NULL', 'null')
  EMPTY_FIELD_AS_NULL = TRUE;

/*-- Another way to do it by SnowSQL
PUT file://{PATH}/{FILE_NAME}.csv @sf_tuts.public.%emp_basic;

COPY INTO emp_basic
  FROM @%emp_basic
  FILE_FORMAT = (format_name = 'my_csv_format') 
  PATTERN = '.*employees0[1-5].csv.gz'
  ON_ERROR = 'skip_file';
--*/

--->
CREATE OR REPLACE TABLE CLIENT(
    CLIENT_ID NUMBER,
    CLIENT_NAME STRING,
    CLIENT_LAST_NAME STRING,
    EMAIL STRING
);

CREATE OR REPLACE TABLE STORE(
    STORE_ID NUMBER,
    STORE_NAME STRING,
    LOCATION STRING
);

CREATE OR REPLACE TABLE PRODUCT(
    PRODUCT_ID NUMBER,
    PRODUCT_NAME STRING,
    CATEGORY STRING,
    BRAND STRING
);

CREATE OR REPLACE TABLE ADDRESS(
    ADDRESS_ID NUMBER,
    STREET STRING,
    CITY STRING,
    STATE STRING,
    ZIP_CODE NUMBER
);

CREATE OR REPLACE TABLE FACT(
    TRANSACTION_ID NUMBER,
    CLIENT_ID NUMBER,
    STORE_ID NUMBER,
    PRODUCT_ID NUMBER,
    ADDRESS_ID NUMBER,
    QUANTITY_OF_ITEMS_SOLD NUMBER,
    UNIT_PRICE FLOAT,
    DISCOUNT DOUBLE
);

---> Metrics
--->
CREATE OR REPLACE VIEW VIEW_PRODUCT_REVENUE AS
SELECT 
    PRODUCT,
    SUM(REVENUE) AS REVENUE
FROM(
    SELECT 
        P.PRODUCT_NAME AS PRODUCT, 
        F.QUANTITY_OF_ITEMS_SOLD * (F.UNIT_PRICE * (1 - F.DISCOUNT)) AS REVENUE
    FROM FACT F 
    LEFT JOIN(
        SELECT DISTINCT PRODUCT_ID, PRODUCT_NAME
        FROM PRODUCT
    ) P
    ON F.PRODUCT_ID = P.PRODUCT_ID
)
GROUP BY PRODUCT
ORDER BY PRODUCT;

--->
CREATE OR REPLACE VIEW VIEW_STORE_REVENUE AS
SELECT 
    STORE,
    SUM(REVENUE) AS REVENUE
FROM(
    SELECT
        S.STORE_NAME AS STORE, 
        F.QUANTITY_OF_ITEMS_SOLD * (F.UNIT_PRICE * (1 - F.DISCOUNT)) AS REVENUE
    FROM FACT F
    INNER JOIN STORE S
    ON F.STORE_ID = S.STORE_ID
)
GROUP BY STORE
ORDER BY STORE;

--->
CREATE VIEW VIEW_CLIENT_RETURN AS
SELECT 
    COUNT(DISTINCT CLIENT_ID) AS TOTAL_CLIENTS,
    COUNT(*) AS TOTAL_SALES,
    (COUNT(DISTINCT CLIENT_ID) / COUNT(*)) * 100 AS RETURN_PERCENTAGE
FROM FACT;

--->
CREATE VIEW VIEW_AVG_REVENUE_PER_TRANSACTION AS
SELECT AVG(TRANSACTION_TOTAL.REVENUE) AS AVG_REVENUE
FROM (
    SELECT SUM(QUANTITY_OF_ITEMS_SOLD * (UNIT_PRICE * (1 - DISCOUNT))) AS REVENUE
    FROM FACT
    GROUP BY TRANSACTION_ID
) AS TRANSACTION_TOTAL;